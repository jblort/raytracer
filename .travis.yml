language: cpp

linux: &linux
  os: linux
  dist: bionic
  sudo: required
  compiler: clang
  addons: &clang6
    apt:
      sources: ['llvm-toolchain-trusty-6.0', 'ubuntu-toolchain-r-test']
      packages: ['clang-6.0', 'g++-7']

matrix:
    include:

        # Linux C++14 GCC builds
        #- os: linux
        #  compiler: gcc
        #  addons: &gcc6
        #    apt:
        #      sources: ['ubuntu-toolchain-r-test']
        #      packages: ['g++-6']
        #  env: COMPILER='g++-6' BUILD_TYPE='Release'

        #- os: linux
        #  compiler: gcc
        #  addons: *gcc6
        #  env: COMPILER='g++-6' BUILD_TYPE='Debug'

        #Linux C++14 Clang builds
        - <<: *linux
          env: COMPILER='clang++-6.0' BUILD_TYPE='Release'

        - <<: *linux
          env: COMPILER='clang++-6.0' BUILD_TYPE='Debug'

        # OSX C++14 Clang Builds

        - os: osx
          compiler: clang
          env: COMPILER='clang++' BUILD_TYPE='Debug'

        - os: osx
          compiler: clang
          env: COMPILER='clang++' BUILD_TYPE='Release'

install:
# Install conan
- sudo pip install conan --upgrade --ignore-installed
# Add relevant conan repositories
- conan remote add public-conan https://api.bintray.com/conan/bincrafters/public-conan
- conan remote add public-jbl https://api.bintray.com/conan/jblort/public-jbl
# Automatic detection of your arch, compiler, etc.
- conan user
- conan user -p $CONAN_API_KEY -r public-jbl $CONAN_USER_NAME
# Install cmake
#- if [ $TRAVIS_OS_NAME = osx ]; then brew install cmake; fi

before_script:
- mkdir build
- cd build
- conan install .. --build missing
- cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..

script:
- cmake --build .
- ctest -V

branches:
    only:
        - master

notifications:
    email: false
